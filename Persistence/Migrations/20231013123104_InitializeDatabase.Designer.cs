// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231013123104_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Curators.Expert", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ArchitecturalStyleExpertise")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("architectural_style_expertise");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("biography");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_experts");

                    b.ToTable("experts", (string)null);
                });

            modelBuilder.Entity("Domain.DigitalTours.Highlight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("MultimediaUrls")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MultimediaUrlsString");

                    b.Property<Guid>("VirtualTourId")
                        .HasColumnType("uuid")
                        .HasColumnName("virtual_tour_id");

                    b.HasKey("Id")
                        .HasName("pk_highlights");

                    b.HasIndex("VirtualTourId")
                        .HasDatabaseName("ix_highlights_virtual_tour_id");

                    b.ToTable("highlights", (string)null);
                });

            modelBuilder.Entity("Domain.DigitalTours.InteractiveSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uuid")
                        .HasColumnName("expert_id");

                    b.Property<DateTime>("SheduledTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sheduled_time");

                    b.Property<Guid>("VirtualTourId")
                        .HasColumnType("uuid")
                        .HasColumnName("virtual_tour_id");

                    b.HasKey("Id")
                        .HasName("pk_interactive_sessions");

                    b.HasIndex("ExpertId")
                        .HasDatabaseName("ix_interactive_sessions_expert_id");

                    b.HasIndex("VirtualTourId")
                        .HasDatabaseName("ix_interactive_sessions_virtual_tour_id");

                    b.ToTable("interactive_sessions", (string)null);
                });

            modelBuilder.Entity("Domain.DigitalTours.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("ParticipantId")
                        .HasDatabaseName("ix_reservations_participant_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("Domain.DigitalTours.VirtualTour", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid>("EstateId")
                        .HasColumnType("uuid")
                        .HasColumnName("estate_id");

                    b.Property<string>("NarrationLanguage")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("narration_language");

                    b.Property<DateTime>("OrganizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("organized_at");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id")
                        .HasName("pk_virtual_tours");

                    b.HasIndex("EstateId")
                        .HasDatabaseName("ix_virtual_tours_estate_id");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("ix_virtual_tours_reservation_id");

                    b.ToTable("virtual_tours", (string)null);
                });

            modelBuilder.Entity("Domain.EstateExhibits.Estate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_estates");

                    b.ToTable("estates", (string)null);
                });

            modelBuilder.Entity("Domain.EstateExhibits.HistoricalEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<Guid>("EstateId")
                        .HasColumnType("uuid")
                        .HasColumnName("estate_id");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("impact");

                    b.HasKey("Id")
                        .HasName("pk_historical_events");

                    b.HasIndex("EstateId")
                        .HasDatabaseName("ix_historical_events_estate_id");

                    b.ToTable("historical_events", (string)null);
                });

            modelBuilder.Entity("Domain.EstateExhibits.MultimediaContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("HistoricalEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("historical_event_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_multimedia_contents");

                    b.HasIndex("HistoricalEventId")
                        .HasDatabaseName("ix_multimedia_contents_historical_event_id");

                    b.ToTable("multimedia_contents", (string)null);
                });

            modelBuilder.Entity("Domain.Participants.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_participants");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_participants_email");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("Domain.Curators.Expert", b =>
                {
                    b.OwnsMany("Domain.EstateExhibits.EstateId", "AssociatedEstates", b1 =>
                        {
                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("EstateId");

                            b1.Property<Guid>("ExpertId")
                                .HasColumnType("uuid")
                                .HasColumnName("expert_id");

                            b1.HasKey("Value")
                                .HasName("pk_estate_id");

                            b1.HasIndex("ExpertId")
                                .HasDatabaseName("ix_estate_id_expert_id");

                            b1.ToTable("estate_id", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExpertId")
                                .HasConstraintName("fk_estate_id_experts_expert_temp_id");
                        });

                    b.Navigation("AssociatedEstates");
                });

            modelBuilder.Entity("Domain.DigitalTours.Highlight", b =>
                {
                    b.HasOne("Domain.DigitalTours.VirtualTour", null)
                        .WithMany("ScheduledHighlights")
                        .HasForeignKey("VirtualTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_highlights_virtual_tours_virtual_tour_temp_id2");
                });

            modelBuilder.Entity("Domain.DigitalTours.InteractiveSession", b =>
                {
                    b.HasOne("Domain.Curators.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interactive_sessions_experts_expert_id1");

                    b.HasOne("Domain.DigitalTours.VirtualTour", null)
                        .WithMany("ScheduledSessions")
                        .HasForeignKey("VirtualTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interactive_sessions_virtual_tours_virtual_tour_temp_id2");
                });

            modelBuilder.Entity("Domain.DigitalTours.Reservation", b =>
                {
                    b.HasOne("Domain.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_participants_participant_id1");
                });

            modelBuilder.Entity("Domain.DigitalTours.VirtualTour", b =>
                {
                    b.HasOne("Domain.EstateExhibits.Estate", null)
                        .WithMany("VirtualTours")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_virtual_tours_estates_estate_temp_id1");

                    b.HasOne("Domain.DigitalTours.Reservation", null)
                        .WithMany("VirtualTours")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_virtual_tours_reservations_reservation_temp_id");

                    b.OwnsOne("Domain.DigitalTours.Price", "TourPrice", b1 =>
                        {
                            b1.Property<Guid>("VirtualTourId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("tour_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("tour_price_currency");

                            b1.HasKey("VirtualTourId");

                            b1.ToTable("virtual_tours");

                            b1.WithOwner()
                                .HasForeignKey("VirtualTourId")
                                .HasConstraintName("fk_virtual_tours_virtual_tours_id");
                        });

                    b.Navigation("TourPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.EstateExhibits.Estate", b =>
                {
                    b.OwnsOne("Domain.EstateExhibits.ArchitecturalStyle", "ArchitecturalStyle", b1 =>
                        {
                            b1.Property<Guid>("EstateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("architectural_style_description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("architectural_style_name");

                            b1.Property<string>("Period")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("architectural_style_period");

                            b1.HasKey("EstateId");

                            b1.ToTable("estates");

                            b1.WithOwner()
                                .HasForeignKey("EstateId")
                                .HasConstraintName("fk_estates_estates_id");
                        });

                    b.OwnsOne("Domain.EstateExhibits.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("EstateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("location_address");

                            b1.Property<string>("Latitude")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("location_latitude");

                            b1.Property<string>("Longitude")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("location_longitude");

                            b1.HasKey("EstateId");

                            b1.ToTable("estates");

                            b1.WithOwner()
                                .HasForeignKey("EstateId")
                                .HasConstraintName("fk_estates_estates_id");
                        });

                    b.OwnsOne("Domain.EstateExhibits.YearBuilt", "YearBuilt", b1 =>
                        {
                            b1.Property<Guid>("EstateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("year_built_year");

                            b1.HasKey("EstateId");

                            b1.ToTable("estates");

                            b1.WithOwner()
                                .HasForeignKey("EstateId")
                                .HasConstraintName("fk_estates_estates_id");
                        });

                    b.Navigation("ArchitecturalStyle")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("YearBuilt")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.EstateExhibits.HistoricalEvent", b =>
                {
                    b.HasOne("Domain.EstateExhibits.Estate", null)
                        .WithMany("Events")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_historical_events_estates_estate_temp_id");
                });

            modelBuilder.Entity("Domain.EstateExhibits.MultimediaContent", b =>
                {
                    b.HasOne("Domain.EstateExhibits.HistoricalEvent", null)
                        .WithMany("MultimediaContents")
                        .HasForeignKey("HistoricalEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_multimedia_contents_historical_events_historical_event_temp");
                });

            modelBuilder.Entity("Domain.DigitalTours.Reservation", b =>
                {
                    b.Navigation("VirtualTours");
                });

            modelBuilder.Entity("Domain.DigitalTours.VirtualTour", b =>
                {
                    b.Navigation("ScheduledHighlights");

                    b.Navigation("ScheduledSessions");
                });

            modelBuilder.Entity("Domain.EstateExhibits.Estate", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("VirtualTours");
                });

            modelBuilder.Entity("Domain.EstateExhibits.HistoricalEvent", b =>
                {
                    b.Navigation("MultimediaContents");
                });
#pragma warning restore 612, 618
        }
    }
}
